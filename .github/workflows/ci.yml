# Differences to ci.jsonnet (the old internal CI):
# * In general most tests are run on a single platform rather than all platforms
# * ubuntu-22.04-arm is chosen as the default platform because it is the fastest on GitHub Actions
# * Test on a single JDK instead of stable + latest
# * No `jt test mri --fast --no-sulong` on JVM
# * `jt test mri --fast --no-sulong` on Native instead of `test mri --no-sulong`
# Those differences are intentional to avoid making the CI too slow.
name: CI
on:
  workflow_dispatch:
  pull_request:
    paths-ignore: ['**.md']
  push:
    branches: [master]
    paths-ignore: ['**.md']
permissions:
  contents: read
# This can be inconvenient when modifying CI, feel free to comment it out temporarily
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  lint: # ~10min
    name: lint
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 30
    steps:
    - name: Clone TruffleRuby
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necessary for jt check_abi
    - name: Setup system Ruby
      uses: ruby/setup-ruby@v1
    - name: Setup jt
      run: echo "$PWD/bin" >> $GITHUB_PATH

    - uses: ./.github/actions/setup-jvmci-graal

    - run: jt --jdk 21 install jvmci
    - name: Set TOOLS_JAVA_HOME
      run: echo "TOOLS_JAVA_HOME=$(jt --jdk 21 install jvmci)" >> $GITHUB_ENV

    - run: jt install eclipse
    - name: Install RuboCop
      run: gem install --no-document rubocop:0.66.0
    - name: Build with --warning-as-error to ensure there are no non-deprecation warnings
      # See comment in ci.jsonnet about --jdt
      run: jt build -- --jdt builtin --warning-as-error --force-deprecation-as-warning
    - run: jt lint

  build: # ~5min
    name: build jvm
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 30
    defaults:
      run:
        # Ensure all build files are in build/.
        # Test jobs don't have build/ to ensure nothing uses the build files.
        working-directory: build
    steps:
    - name: Clone TruffleRuby
      uses: actions/checkout@v4
      with:
        path: build
    - name: Setup system Ruby
      uses: ruby/setup-ruby@v1
      with:
        working-directory: build
    - name: Setup jt
      run: echo "$PWD/bin" >> $GITHUB_PATH

    - uses: ./build/.github/actions/setup-jvmci-graal

    - name: Build TruffleRuby
      run: jt build

    - name: Create archive
      run: |
        mv "$(jt -u jvm ruby-home)" "${{ github.workspace }}/truffleruby-jvm"
        cd ${{ github.workspace }}
        tar cf ${{ github.workspace }}/truffleruby-jvm.tar truffleruby-jvm
    - uses: actions/upload-artifact@v4
      with:
        name: truffleruby-jvm
        path: ${{ github.workspace }}/truffleruby-jvm.tar
        include-hidden-files: true

  build_native: # ~10min
    name: build native
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 30
    defaults:
      run:
        # Ensure all build files are in build/.
        # Test jobs don't have build/ to ensure nothing uses the build files.
        working-directory: build
    steps:
    - name: Clone TruffleRuby
      uses: actions/checkout@v4
      with:
        path: build
    - name: Setup system Ruby
      uses: ruby/setup-ruby@v1
      with:
        working-directory: build
    - name: Setup jt
      run: echo "$PWD/bin" >> $GITHUB_PATH

    - uses: ./build/.github/actions/setup-jvmci-graal

    - run: free -m
    - name: Build TruffleRuby
      run: jt build --env native

    - name: Create archive
      run: |
        mv "$(jt -u native ruby-home)" "${{ github.workspace }}/truffleruby-native"
        cd ${{ github.workspace }}
        tar cf ${{ github.workspace }}/truffleruby-native.tar truffleruby-native
    - uses: actions/upload-artifact@v4
      with:
        name: truffleruby-native
        path: ${{ github.workspace }}/truffleruby-native.tar
        include-hidden-files: true

  # Keep in sync with the same job in daily.yml
  platform_checks: # ~7-9min, ~30min on macos-15-intel
    name: platform ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        # NOTE: macos-15-intel is tested in daily.yml because it's much slower
        os: [ubuntu-22.04, ubuntu-22.04-arm, macos-14]
    steps:
    - name: Clone TruffleRuby
      uses: actions/checkout@v4
    - name: Setup system Ruby
      uses: ruby/setup-ruby@v1
    - name: Setup jt
      run: echo "$PWD/bin" >> $GITHUB_PATH
    - uses: ./.github/actions/setup-jvmci-graal
    - uses: ./.github/actions/platform-checks

  test_needing_build_files: # ~17min
    name: tests needing build files
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 30
    defaults:
      run:
        # Use build/ too for consistency in steps
        working-directory: build
    steps:
    - name: Clone TruffleRuby
      uses: actions/checkout@v4
      with:
        path: build
    - name: Setup system Ruby
      uses: ruby/setup-ruby@v1
      with:
        working-directory: build
    - name: Setup jt
      run: echo "$PWD/bin" >> $GITHUB_PATH

    - uses: ./build/.github/actions/setup-jvmci-graal

    - run: jt build
    - run: jt mx build
    - run: jt test unit --verbose # ~1min
    - run: jt test tck # ~1min
    - run: jt test polyglot # ~5min
    # jt test compiler needs jvm-ce, test it here for simplicity
    - run: jt build --env jvm-ce
    - run: jt -u jvm-ce test compiler

  # NOTE: these tests could run on native instead of jvm and take less cumulative CI time,
  # but that would delay their start since building native takes longer,
  # and increase CI duration (jvm 6min build + 14min :truffle vs native 14min build + 10min cexts).
  all_tests:
    name: jt test ${{ matrix.test }}
    needs: [build]
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        # Group tests to fit under the max time (12min) and minimize the number of jobs to be under GitHub Actions concurrency limits (20)
        test:
        - :truffle # ~12min
        - :language :core :cxx # ~3min ~7min ~1min
        - :command_line :library :cext :security :tracepoint :next # ~5min ~2min ~1.5min ~0.75min ~0.5min ~0.25min
        - fast bundle cexts # ~1.5min ~1.5min ~6.5min
        - "'mri --all-sulong'" # ~6min
        - integration basictest # ~10min ~0.5min
        - gems ecosystem # ~2min ~6min
    steps:
    - name: Clone TruffleRuby
      uses: actions/checkout@v4
    - name: Setup system Ruby
      uses: ruby/setup-ruby@v1
    - name: Setup jt
      run: echo "SYSTEM_RUBY=$(which ruby)" >> $GITHUB_ENV && echo "$PWD/bin" >> $GITHUB_PATH

    - uses: actions/download-artifact@v4
      with:
        name: truffleruby-jvm
    - uses: ./.github/actions/setup-truffleruby

    - run: for t in ${{ matrix.test }}; do echo jt test $t; jt test $t || exit $?; done

  test_native: # ~8min
    name: test native
    needs: [build_native]
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 30
    steps:
    - name: Clone TruffleRuby
      uses: actions/checkout@v4
    - name: Setup system Ruby
      uses: ruby/setup-ruby@v1
    - name: Setup jt
      run: echo "SYSTEM_RUBY=$(which ruby)" >> $GITHUB_ENV && echo "$PWD/bin" >> $GITHUB_PATH

    - uses: actions/download-artifact@v4
      with:
        name: truffleruby-native
    - uses: ./.github/actions/setup-truffleruby
      with:
        archive: truffleruby-native

    - run: jt test compiler # ~3min
    - run: jt test :all # ~5min
    # To catch slow :truffle specs which only apply to native
    - run: jt test fast :truffle # ~10s

  test_native_mri_tests: # ~6min
    name: run MRI tests on native
    needs: [build_native]
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 30
    steps:
    - name: Clone TruffleRuby
      uses: actions/checkout@v4
    - name: Setup system Ruby
      uses: ruby/setup-ruby@v1
    - name: Setup jt
      run: echo "SYSTEM_RUBY=$(which ruby)" >> $GITHUB_ENV && echo "$PWD/bin" >> $GITHUB_PATH

    - uses: actions/download-artifact@v4
      with:
        name: truffleruby-native
    - uses: ./.github/actions/setup-truffleruby
      with:
        archive: truffleruby-native

    - run: jt test mri --fast --no-sulong -- --jobs=4 --longest=10

  ruby_spec_cruby: # ~3min
    name: ruby/spec on CRuby
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 30
    env:
      CHECK_LEAKS: 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Setup jt
      run: echo "$PWD/bin" >> $GITHUB_PATH

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2
        bundler: none
    - run: jt -u ruby mspec -fdot --timeout 30 spec/ruby

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3
        bundler: none
    - run: jt -u ruby mspec -fdot --timeout 30 spec/ruby

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.4
        bundler: none
    - run: jt -u ruby mspec -fdot --timeout 30 spec/ruby
